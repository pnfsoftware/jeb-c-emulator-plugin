from z3 import *
 
# initialize our symbols as 8-bit bitvectors
c0 = BitVec('c0', 8)
c1 = BitVec('c1', 8)
c2 = BitVec('c2', 8)
c3 = BitVec('c3', 8)
c4 = BitVec('c4', 8)
c5 = BitVec('c5', 8)
c6 = BitVec('c6', 8)
c7 = BitVec('c7', 8)
c8 = BitVec('c8', 8)
c9 = BitVec('c9', 8)
c10 = BitVec('c10', 8)
c11 = BitVec('c11', 8)
c12 = BitVec('c12', 8)
c13 = BitVec('c13', 8)
c14 = BitVec('c14', 8)
c15 = BitVec('c15', 8)
c16 = BitVec('c16', 8)
c17 = BitVec('c17', 8)
c18 = BitVec('c18', 8)

s = Solver()

# allowed character range
s.add(c0 > 32, c0 < 127)
s.add(c0 > 32, c0 < 127)
s.add(c1 > 32, c1 < 127)
s.add(c2 > 32, c2 < 127)
s.add(c3 > 32, c3 < 127)
s.add(c4 > 32, c4 < 127)
s.add(c5 > 32, c5 < 127)
s.add(c6 > 32, c6 < 127)
s.add(c7 > 32, c7 < 127)
s.add(c8 > 32, c8 < 127)
s.add(c9 > 32, c9 < 127)
s.add(c10 > 32, c10 < 127)
s.add(c11 > 32, c11 < 127)
s.add(c12 > 32, c12 < 127)
s.add(c13 > 32, c13 < 127)
s.add(c14 > 32, c14 < 127)
s.add(c15 > 32, c15 < 127)
s.add(c16 > 32, c16 < 127)
s.add(c17 > 32, c17 < 127)
s.add(c18 > 32, c18 < 127)

# constraints
s.add((((c12-c10)^c13)*(c6*c14))==16335)
s.add(((c18^c1)^(c15-c7))==83)
s.add((((c9+c5)^c0)*(c17-c16))==4294961394)
s.add((c3-c11)==11)
s.add(((c2+c4)^c8)==3)
s.add((c8+(c15-c4))==176)
s.add((((c9^c10)-(c11+c18))^c6)==4294967097)
s.add(((c1*(c0^c17))+(c2*c16))==9985)
s.add(((c14*c13)-c7)==2083)
s.add(((c12+c3)-c5)==110)
s.add(((c8*c10)+(c9+c13))==5630)
s.add(((c5-c16)-(c2+c0))==4294967114)
s.add((c17*(c14^c7))==7200)
s.add(((c1*c3)+(c6*c11))==17872)
s.add(((c12-c15)-(c18*c4))==4294961888)
s.add(((c11*c2)+(c3*c15))==18888)
s.add((c16*(c5+c13))==15049)
s.add((c17*(c0+c10))==12150)
s.add((c18*(c14^c6))==10080)
s.add(((c7+c12)-c4)==132)
s.add((c8+(c1*c9))==2453)

# result
print(s.check())
m = s.model()
result = ''
result += chr(m[c0].as_long())
result += chr(m[c1].as_long())
result += chr(m[c2].as_long())
result += chr(m[c3].as_long())
result += chr(m[c4].as_long())
result += chr(m[c5].as_long())
result += chr(m[c6].as_long())
result += chr(m[c7].as_long())
result += chr(m[c8].as_long())
result += chr(m[c9].as_long())
result += chr(m[c10].as_long())
result += chr(m[c11].as_long())
result += chr(m[c12].as_long())
result += chr(m[c13].as_long())
result += chr(m[c14].as_long())
result += chr(m[c15].as_long())
result += chr(m[c16].as_long())
result += chr(m[c17].as_long())
result += chr(m[c18].as_long())
print(result)


